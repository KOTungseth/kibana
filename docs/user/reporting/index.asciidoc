[role="xpack"]
[[reporting-getting-started]]
= Sharing

[partintro]

--

To share {kib} objects, such as dashboards, visualizations, saved searches, and *Canvas* workpads, with a larger audience, {kib} provides you with several sharing options. 

Sharing options include:

* *Embed code* &mdash; Embed a fully interactive dashboard or visualization as an iframe on a web page.

* *Permalinks* &mdash; Share a direct link to a saved search, dashboard, or visualization. User authentication is required.

* *PDF Reports* &mdash; Generate and download a PDF file of a dashboard, visualization, or *Canvas* workpad.

* *PNG Reports* &mdash; Generate and download a PNG file of a dashboard or visualization.

* *CSV Reports* &mdash; Generate and download a CSV file of a saved search.

* *Download as JSON* &mdash; Generate and download a JSON file of a *Canvas* workpad.

* beta[] *Share on a website* &mdash; Download and securely share *Canvas* workpads on any website.

You can also <<automating-report-generation,automatically generate reports>> with {watcher} or a script.

[float]
[[configuring-reporting]]
== Configure the security settings for sharing

The sharing options are dependent on the reporting settings. To use {report-features} with {security-features} enabled, 
you need to <<using-kibana-with-security,configure security in {kib}>>.

If you are automatically generating reports with {ref}/xpack-alerting.html[{watcher}], you also need to configure {watcher}
to trust the {kib} server certificate.

[float]
[[reporting-roles-management-ui]]
=== Assign the reporting role

To generate reports, you must have the `reporting_user` role and the necessary privileges to access the object you want to share, and the {es} indices in the object.

. Open the main menu, then click *Stack Management > Roles*.

.. Click *Create role*, then give the role a name. For example, `custom_reporting_user`.

.. On the *Create role* page, add a line for each index that contains the report data, then give each index `read` and `view_index_metadata` privileges.
+
For more information, refer to {ref}/security-privileges.html[Security privileges].
+
[role="screenshot"]
image::user/security/images/reporting-privileges-example.png["Reporting privileges"]

.. To add space privileges, click *Add {kib} privilege*, enable *All* privileges for the applicable apps, then click *Add {kib} privilege*.

.. Click *Create role*.

. Open the main menu, then click *Stack Management > Users*.

.. Click the user, then select `reporting_user` and `custom_reporting_user` from the *Roles* dropdown.

.. Click *Update user*.

[float]
[[assign-the-reporting-role-for-a-custom-index]]
==== Assign the reporting role for a custom index

When you generate reports with a custom index, you must create a custom role with appropriate access to the index
if you use a different pattern for <<xpack-reporting-index,`xpack.reporting.index`>>.

. Open the main menu, then click *Stack Management > Roles*.

.. Click *Create role*, then give the role a name. For example, `custom_reporting_user`.

.. From the *Indices* dropdown, select the custom index.

.. From the *Privileges* dropdown, select *all*.

. Open the main menu, then click *Stack Management > Users*.

.. Click the user, then select `kibana_system` and `custom-reporting-user` from the *Roles* dropdown.

.. Click *Update user*.

. Open kibana.yml, then configure {kib} to use the new account:

[source,js]
--------------------------------------------------------------------------------
elasticsearch.username: 'custom_kibana_system'
--------------------------------------------------------------------------------

[float]
[[reporting-roles-user-api]]
==== Assign the reporting role with the user API

Create a user with the `reporting_user` and `kibana_admin` roles using the {ref}/security-api-put-user.html[user API].

[source, sh]
---------------------------------------------------------------
POST /_security/user/reporter
{
  "password" : "x-pack-test-password",
  "roles" : ["kibana_admin", "reporting_user"],
  "full_name" : "Reporting User"
}
---------------------------------------------------------------

[float]
==== Assign the reporting role for an external identity provider

If you are using an external identity provider, such as LDAP or Active Directory, you can assign the reporting role to individual users
or groups of users. By default, role mappings are configured in {ref}/mapping-roles.html[`config/role_mapping.yml`].

For example, assign the Bill Murray user the `kibana_admin` and `reporting_user` roles:

[source,yaml]
--------------------------------------------------------------------------------
kibana_admin:
  - "cn=Bill Murray,dc=example,dc=com"
reporting_user:
  - "cn=Bill Murray,dc=example,dc=com"
--------------------------------------------------------------------------------

[float]
[[embedding-security]]
=== Configure the embed code settings

To minimize security risks, embedding content through iframes requires careful consideration. By default, modern web browsers enforce the
https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy[same-origin policy] to restrict the behavior of framed pages. When
{stack-security-features} are enabled on your cluster, you must relax the constraint for <<embedding-cookies, cookies>> so that {kib} can function
in an iframe. For more information, refer to https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe[iframe] and
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite cookies].

[float]
==== Authentication
When you embed {kib} objects in a website that supports Single Sign-On with SAML, OpenID Connect, Kerberos, or PKI, it's highly recommended 
that you configure {kib} as a part of the Single Sign-On setup. To provide the most secure and seamless experience, make sure that you operate in 
a single and properly configured security domain. For more information, refer to <<kibana-authentication, Authentication in {kib}>>.

To allow users access to embedded {kib} objects without logging in when Single Sign-On isn't an option, use <<anonymous-authentication, anonymous access>>. 
Anonymous access is natively integrated into the workflow for embedding dashboards and visualizations.

When you have multiple authentication providers enabled, and you want to automatically log in anonymous users when embedding anything other than dashboards and visualizations, 
add the `auth_provider_hint=<anonymous-provider-name>` query string parameter to the {kib} URL that you're embedding.

For example:

```html
<iframe src="https://localhost:5601/app/monitoring#/elasticsearch/nodes?embed=true&_g=(....)" height="600" width="800"></iframe>
```

To automatically enable anonymous access, modify the link to {kib} in the `src` iframe attribute:

```html
<iframe src="https://localhost:5601/app/monitoring?auth_provider_hint=anonymous1#/elasticsearch/nodes?embed=true&_g=(....)" height="600" width="800"></iframe>
```

NOTE: The `auth_provider_hint` query string parameter goes *before* the hash URL fragment.

[float]
[[embedding-cookies]]
==== Configure cookies

Regardless of the authentication type that you're using for the embedded {kib} object, you must make sure that the browsers can transmit session cookies to a {kib} server. 
To support modern browsers, set <<xpack-security-sameSiteCookies, `xpack.security.sameSiteCookies`>> to `None`. 

[source,yaml]
-----------------------
xpack.security.sameSiteCookies: "None"
-----------------------

[float]
[role="xpack"]
[[securing-reporting]]
=== Secure the reporting endpoints

In a production environment, you should restrict access to the reporting endpoints for authorized users. 

. Enable the {stack-security-features} on your {es} cluster. For information on how to enable the {stack-security-features}, refer to {ref}/security-getting-started.html[Getting started with security].

. Configure TLS/SSL encryption for the {kib} server. For information on TLS/SSL encryption, refer to <<configuring-tls>>.

. Specify the {kib} server CA certificate chain in `elasticsearch.yml`.
+
If you are using your own CA to sign the {kib} server certificate, specify the CA certificate chain in {es} to properly establish trust in TLS
connections between {watcher} and {kib}. 
+
If your CA certificate chain is contained in a PKCS #12 trust store, specify the following:
+
[source,yaml]
--------------------------------------------------------------------------------
xpack.http.ssl.truststore.path: "/path/to/your/truststore.p12"
xpack.http.ssl.truststore.type: "PKCS12"
xpack.http.ssl.truststore.password: "optional decryption password"
--------------------------------------------------------------------------------
+
If your CA certificate chain is in PEM format, specify the following:
+
[source,yaml]
--------------------------------------------------------------------------------
xpack.http.ssl.certificate_authorities: ["/path/to/your/cacert1.pem", "/path/to/your/cacert2.pem"]
--------------------------------------------------------------------------------
+
For more information, refer to {ref}/notification-settings.html#ssl-notification-settings[the {watcher} HTTP TLS/SSL Settings].

--

include::share-objects.asciidoc[]
include::automating-report-generation.asciidoc[]
include::reporting-troubleshooting.asciidoc[]
