[role="xpack"]
[[reporting-troubleshooting]]
== Sharing troubleshooting
++++
<titleabbrev>Troubleshooting</titleabbrev>
++++

Having trouble? Here are solutions to common problems you might encounter.

[float]
[[reporting-diagnostics]]
=== Run the reporting diagnostics
To find recommendations to common issues, use the diagnostic tool to evaluate the {kib} deployment. 

. Open the main menu, then click *Stack Management > Reporting*.

. On the *Reports* page, click *Run reporting diagnostics*.
 
[float]
[[reporting-troubleshooting-system-dependencies]]
=== System dependencies
Reporting launches a "headless" web browser called Chromium on the {kib} server. The {kib} server OS can require additional
dependencies to run the Chromium executable.

. Make sure the {kib} server OS has the appropriate packages installed for the distribution.

. If you are using CentOS/RHEL systems, install the following packages:

* `ipa-gothic-fonts`
* `xorg-x11-fonts-100dpi`
* `xorg-x11-fonts-75dpi`
* `xorg-x11-utils`
* `xorg-x11-fonts-cyrillic`
* `xorg-x11-fonts-Type1`
* `xorg-x11-fonts-misc`
* `fontconfig`
* `freetype`

. If you are using Ubuntu/Debian systems, install the following packages:

* `fonts-liberation`
* `libfontconfig1`

When the system is missing dependencies, report generation fails in a non-deterministic way. {kib} runs a self-test at server startup, and
if errors occur, they appear in <<console-kibana,Console>>. The most common error message is `Error: connect ECONNREFUSED`, which indicates
that {kib} was unable to connect to the Chromium process.

To troubleshoot the problem, start the {kib} server with environment variables that tell Chromium to print verbose logs. For more information,
refer to <<reporting-troubleshooting-puppeteer-debug-logs, Puppeteer debug method>>.

[float]
[[reporting-troubleshooting-text-incorrect]]
=== Text rendered incorrectly in reports

When a report label is rendered as an empty rectangle, all system fonts are unavailable. Install at least one font package on the system.

When the report is missing certain Chinese, Japanese, or Korean characters, make sure the system font with the missing characters is installed.

[float]
[[reporting-troubleshooting-missing-data]]
=== Missing data in PDF reports with data table visualization

In PDF reports that include a data table or saved search, only the first page of data rows, which are the only data rows
visible on the screen, are shown in PDF reports.

[float]
[[reporting-troubleshooting-file-permissions]]
=== File permissions

Make sure that the `headless_shell` binary located in your {kib} data directory is owned by the user running {kib}, the
user has the execute permission, and when applicable, the filesystem is mounted with the `exec` option.

[NOTE]
--
The Chromium binary is located in the {kib} installation directory as `data/headless_shell-OS_TYPE/headless_shell`. The full path is logged
the first time {kib} starts when verbose logging is enabled.
--

[float]
[[reporting-troubleshooting-error-messages]]
=== Error messages

Review common error messages and the solutions.

[float]
==== Max attempts reached

*Cause:*

* You're creating a PDF of a visualization or dashboard that spans a large amount of data and {kib} is hitting the `xpack.reporting.queue.timeout`.

* {kib} is hosted behind a reverse-proxy and the <<reporting-kibana-server-settings, Kibana server settings>> are incorrectly configured.

*Solution:*
Create a Markdown visualization, then create the PDF report. 

If you can successfully create the report, increase `xpack.reporting.queue.timeout`.

If the report fails with `Max attempts reached`, check the <<reporting-kibana-server-settings, Kibana server settings>>.

[float]
[[reporting-troubleshooting-nss-dependency]]
==== You must install nss for Reporting to work

*Cause:*
{kib} relies on the Network Security Service libraries (NSS) to use the Chromium browser. 

*Solution:*
Install the appropriate nss package for your distribution.

[float]
[[reporting-troubleshooting-sandbox-dependency]]
==== Unable to use Chromium sandbox

*Cause:*
Chromium uses sandboxing techniques that are built on top of operating system primitives.

*Solution:*
Before you disable the sandbox, research the feasibility of enabling unprivileged user namespaces. 
If you are running {kib} in Docker, the container can run in a user namespace with the built-in seccomp/bpf filters.

[float]
[[reporting-troubleshooting-verbose-logs]]
=== Verbose logs

{kib} server logs contain information for troubleshooting and understanding behavior. If you have issues, refer to the logs:

[source,yaml]
--------------------------------------------------------------------------------
logging.verbose: true
--------------------------------------------------------------------------------

For more information about logging, refer to <<logging-verbose,Kibana configuration settings>>.

[float]
[[reporting-troubleshooting-puppeteer-debug-logs]]
=== Puppeteer debug logs

The Chromium browser that {kib} launches on the server is driven by a NodeJS library for Chromium called Puppeteer. The Puppeteer library
has its own command-line method to generate its own debug logs, which can be helpful to figure out if a problem is
caused by {kib} or Chromium. For more information, refer to https://github.com/GoogleChrome/puppeteer/blob/v1.19.0/README.md#debugging-tips[debugging tips].

Use Puppeteer's debug method when launching {kib}:
```
env DEBUG="puppeteer:*" ./bin/kibana
```
The internal *Dev Tools* protocol traffic is logged via the `debug` module under the `puppeteer` namespace.

The Puppeteer logs are very verbose and can contain sensitive information. Handle the output with care.

[float]
[[reporting-troubleshooting-system-requirements]]
=== System requirements

By default, the {kib} instances that most configurations provide include 1GB of RAM, which is enough memory to generate reports of simple objects.
Some objects require more memory than others, for example, a *TSVB* panel that has a lot of network requests. When the {kib} instance needs more memory 
to run the report, the report fails with an error. For example, `Error: Page crashed!` Increase the memory for the {kib} instance to 2GB.

[float]
[[reporting-troubleshooting-arm-systems]]
=== ARM systems compatibility 

Chromium is not compatible with ARM RHEL/CentOS.
