[[lens-end-to-end]]
== Try it: Analyze the web logs data on a dashboard

With the web logs data, you want to find the answers to some key questions about website traffic. 

[role="screenshot"]
image::images/lens_end_to_end_dashboard.png[Final dashboard vis] 

When you're finished, you know the answers to the following questions:

* How many users have visited my website?
* What’s the distribution of visitors by operating system?
* What’s the ratio of code responses over time?
* What’s the average bytes transfer per day? How does it relate to the number of visitors?
* What's the percentage of small vs big files transfer?
* How does website traffic look like hour by hour?
* Where does the traffic come from for top three countries?

[float]
[[add-the-sample-web-logs-data]]
== Add the web logs data

To analyze the website traffic data, add the data set to {kib}.

. From the {kib} *Home* page, click *Try our sample data*.

. From *Sample web logs*, click *Add data*.

[float]
[[end-to-end-create-the-dashboard]]
== Create the dashboard

Open the dashboard, then open the visualization builder. 

. Open the main menu, click *Dashboard*.

. Click *Create dashboard*.

. Click *Create panel*, then click *Lens* on the *New visualization* window.
+
[role="screenshot"]
image::images/lens_end_to_end_1_1.png[New visualization popover]

[float]
[[metric-vis]]
== View the number of website visitors

To view the number of users that have visited your website within the last 90 days, create a metric visualization.

. Make sure the *kibana_sample_data_logs* index appears, then <<set-time-filter,set the time filter>> to *Last 90 days*.
+
[role="screenshot"]
image::images/lens_end_to_end_1_2.png[Index pattern switch and time picker]

. From the *Chart Type* dropdown, select *Metric*.

. From the *Available fields* list, drag and drop *clientip* on to the visualization builder.
+
[role="screenshot"]
image::images/lens_end_to_end_1_3.png[Changed type and dropped clientip field]

. From the editor, click *Unique count of clientip*, then enter `Unique visitors` in the *Display name* field. 
+
[role="screenshot"]
image::images/lens_end_to_end_1_4.png[Flyout config open]

. From the toolbar, click *Save*.

..  In the *Title* field, enter `Unique visitors`. 

.. Select *Add to dashboard after saving*.

.. Click *Save and return*.

[float]
[[donut-vis]]
== Visualize the distribution of visitors by operating system

To visualize the top operating systems your visitors use, create a donut chart, then use the chart help you find the answers the following questions: 

* Should you continue to support Windows 7?

* How important is mobile traffic from iOS devices for your business? 

. From the dashboard, click *Create panel*, then click *Lens* on the *New visualization* window.

. Make sure the *kibana_sample_data_logs* index appears, and the <<set-time-filter,time filter>> is set to *Last 90 days*.

. From the *Chart Type* dropdown, select *Donut*.

. From the *Available fields* list, drag and drop *clientip* to the *Size by* field in the editor.

. From the *Available fields* list, drag and drop *machine.os.keyword* to the *Slice by* field in the editor.

. Change the color palette. 

.. From the editor, click *Top values of machine.os.keyword*. 

.. From the *Color palette* dropdown, select *Compability*.
+
[role="screenshot"]
image::images/lens_end_to_end_2_1.png[Donut chart with open config panel]

. From the toolbar, click *Save*.

..  In the *Title* field, enter `Visitors by OS`. 

.. Select *Add to dashboard after saving*.

.. Click *Save and return*.

[float]
[[mixed-multiaxis]]
==  Visualize the average bytes transfer per day

Visualize the average bytes transfer per day, then compare the data to the number of visitors to your website using a mixed-type, multi-axis chart.

. From the dashboard, click *Create panel*, then click *Lens* on the *New visualization* window.

. Make sure the *kibana_sample_data_logs* index appears, and the <<set-time-filter,time filter>> is set to *Last 90 days*.

. From the *Available fields* list, drag and drop *bytes* to the visualization builder.

. From the editor, click *timestamp*.

.. Select *Customize time interval*.

.. Change the *Minimum interval* to `1 days`.
+
[role="screenshot"]
image::images/lens_end_to_end_3_1.png[Customize time interval]

. From the *Chart Type* dropdown, select *Area*.

[float]
[[add-a-data-layer]]
=== Add a layer

To visualize the number of visitors to your website, add a line chart layer.

. To add a layer, click *+* in the editor.
+
[role="screenshot"]
image::images/lens_end_to_end_3_2.png[Add new layer button]

. To change the visualization type for the layer, click the *Chart type* dropdown, then click the line chart.
+
[role="screenshot"]
image::images/lens_end_to_end_3_3.png[Change layer type]
+
The chart type for the visualization changes to *Mixed XY*.

. From the *Available fields* list, drag and drop *timestamp* to the *Horizontal axis*.

. From the *Available fields* list, drag and drop *clientip* to the *Vertical axis*.

. From the editor, click *timestamp*.

.. Select *Customize time interval*.

.. Change the *Minimum interval* to `1 days`.

. From the editor, click *Unique count of clientip*.

.. In the *Display name* field, enter `Unique visitors`.

.. From the *Series color* dropdown, enter *#CA8EAE*.

//. Something about zooming in on the visualization. 

[float]
[[configure-the-multiaxis-chart]]
=== Configuring the axis

The significant difference in value ranges for both verical axes series makes the values for *Unique visitors* hard to read. To avoid this problem, add a separate axis for *Unique visitors*. 

. From the editor, click *Unique visitors*.

. For *Axis side*, click *Right*.

TIP: Having two different formatting on functions will lead to creating separate axes by default. Change the formatting for *Average of bytes* to *Bytes (1024)* in *Value format*. It will automatically split the axes.

[role="screenshot"]
image::images/lens_end_to_end_3_4.png[Multiaxis chart]

[float]
[[lens-legend-position]]
=== Change the legend position and save the visualization

The visualization is complete, but the legend uses a lot of space. Change the position to the top of the chart, then save the visualization.

. From the *Legend* dropdown, select the top position.
+
[role="screenshot"]
image::images/lens_end_to_end_3_5.png[legend position]

. From the toolbar, click *Save*.

..  In the *Title* field, enter `Average Bytes vs. Unique Visitors`. 

.. Select *Add to dashboard after saving*.

.. Click *Save and return*.

Knowing how the traffic of your page grows or drops can help you optimise the cost of page maintainance and prevent from server unresponsiveness in case of increased unpredicted needs. 

[role="screenshot"]
image::images/lens_end_to_end_3_6.png[Multiaxis chart legend position]

[float]
[[percentage-stacked-area]]
==== What’s the ratio of code responses over time? A percentage stacked area chart

This chart shows the health of the website. It helps to notice some unusual traffic, existance of dead links or errors coming from the server. To configure this chart, you will use *filters* aggregation to divide the responses codes to the following groups:

* successful responses (200-299)
* redirects (300-399)
* client errors (400-499)
* server errors (500-599) 


===== Configure the filters visualization

. Drop the field *Records* to the vertical axis.
. Drop the field *@timestamp* to the horizontal axis. 
. Click on the button under *Break down by* axis. 
. Choose filters from the available functions.
. Modify the default filter _All records_ by clicking on it and typing in KQL field: `response.keyword>=200 AND response.keyword<300`. 
. Add custom label: `2XX`.
+
[role="screenshot"]
image::images/lens_end_to_end_4_1.png[First filter in filters aggregation]

. Proceed with adding the remaining filters:

  ```
  response.keyword>=300 AND response.keyword<400
  response.keyword>=400 AND response.keyword<500
  response.keyword>=500 AND response.keyword<600
  ```

. Once your visualization data is set up, adjust some visual details:
.. Don't display the label on Y-axis. Click on the icon on the top of visualization and turn off *Axis name*
+
[role="screenshot"]
image::images/lens_end_to_end_4_3.png[Turn off axis name]
.. Choose `Status` color pallete - it is nicely aligned with response codes.
.. Switch chart type to `Percentage bar`.
. Save your visualization as `Response Codes Over Time`.

[role="screenshot"]
image::images/lens_end_to_end_4_4.png[Responses codes chart]

[float]
[[histogram]]
====  How does website traffic look like hour by hour? A histogram chart

Do you want to add a new post with the intention of reaching as many users as possible? Or do you need to make a change in your website that requires a short outage of your service? In both cases knowing an hourly website traffic distribution will help. 

. Drag and drop *bytes* to the vertical axis. 
. Open the config panel and configure the following:
.. Select the *sum* function.
.. Change the *Display name* to `Transferred bytes`.
.. Change the *Value format* to `Bytes(1024)`.
+
[role="screenshot"]
image::images/lens_end_to_end_5_1.png[Vertical axis configuration]

. Drag *hour_of_day* field to the horizontal axis.
. Open the config panel for *hour_of_day*. 
. Modify a slider *Intervals granularity* to get hourly intervals.
+
[role="screenshot"]
image::images/lens_end_to_end_5_2.png[Create custom ranges]
. Save the visualization as `Hourly Traffic Distribution`

[float]
[[custom-ranges]]
====  What's the percentage of small vs big files transfer? A pie chart

Another interesting option for *intervals* function is using custom ranges. Let's say you want to compare what's the percentage of small (<10KB) and big (>=10KB) files in over traffic on your page. _Side note: you can also use filters function to achieve the same result with KQL/Lucene filters_

. Drag and drop *bytes* field to the vertical axis. 
. Open the config panel for the dropped element and select a function *sum*.
. Drag and drop *bytes* field to *Break down by*. 
. Open the config panel.
. Change the *Value format* to *Bytes(1024)*.
. Click on *Create custom ranges*.
. Create two custom ranges:
.. `0 - 10240` (up to 10KB) with label `below 10KB`
.. `10240 - +∞` with label: `above 10KB`
+
[role="screenshot"]
image::images/lens_end_to_end_6_1.png[Custom ranges configuration]
. Change the chart type to *pie*.
. Save your chart as `File size distribution`

[role="screenshot"]
image::images/lens_end_to_end_6_2.png[Files size distribution]


[float]
[[treemap]]
====  Where does the traffic come from for top three countries? A multi-level treemap chart

Why would you monitor where the traffic comes from? By analyzing it, you can boost your business and reach out more audience. It gives you insights of which of your strategies work and which don't.

For this chart, let's assume we are interested in tracking the referers specifically from facebook, twitter and the rest. 

===== Creating a multi-level treemap chart

. Choose *treemap* chart type. 
. To the *Size by*, drop *Records* field.  
. Click on the *+* button under the *Group by*.
. Create a filters function with the following filters:
.. KQL: `referer : *facebook.com*`, label: `facebook`
.. KQL: `referer : *twitter.com*`, label: `twitter`
.. KQL: `NOT referer : *twitter* OR NOT referer: *facebook.com*`, label: `other`
+
[role="screenshot"]
image::images/lens_end_to_end_7_1.png[Referers filters]
. Let's assume you want to check out this data only for three top countries. Drag the *geo.src* field to the workspace. 
. _Top values of geo.src_ was added as a second position in *Group by* group. However, we want to firstly divide by countries and then by referers filters. Reorder the items *Filters* and _Top values of geo.src_ by dragging. 
+
[role="screenshot"]
image::images/lens_end_to_end_7_2.png[Treemap vis]
. The Treemap visualization shows four groups for _Top values of geo.src_ - three top countries and a bucket for *Other*. We don't want to display _Other_. Open the config panel for _Top values of geo.src_. 
. Click on *Advanced*.
. Unselect *Group other values as "Other"*.
+
[role="screenshot"]
image::images/lens_end_to_end_7_3.png[Group other values as Other]

. Save your visualization as `Traffic Source For Top 3 Countries` and go back to the dashboard.

==== The result dashboard

Here's the final result after repositioning and rescaling some of the visualizations:

[role="screenshot"]
image::images/lens_end_to_end_dashboard.png[Final dashboard vis] 


